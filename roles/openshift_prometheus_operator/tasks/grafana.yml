---
- name: 'Create Grafana config from template'
  template:
    src: grafana-config-map.ini.j2
    dest: /tmp/grafana.ini

- name: 'Create Grafana datasource config from template'
  template:
    src: grafana-data-sources.yml.j2
    dest: /tmp/datasources.yml

- name: 'Create config-map from Grafana ini config'
  shell: oc create configmap '{{ grafana_ini_configmap_name }}' --from-file=grafana.ini=/tmp/grafana.ini -n '{{ namespace }}'

- name: 'Create config-map from datasources config'
  shell: oc create configmap '{{ grafana_datasources_configmap_name }}' --from-file=datasources.yml=/tmp/datasources.yml -n '{{ namespace }}'

- name: 'Create config-map from dashboards provider config'
  shell: oc create configmap '{{ grafana_dashboards_providers_configmap_name }}' --from-file=provider.yml={{ role_path }}/files/grafana-dashboards-provider.yml -n '{{ namespace }}'

- name: 'Create config-map from dashboards config'
  shell: >
    oc create configmap '{{ grafana_dashboards_configmap_name }}' \
      --from-file=grafana-primary-dashboard.json={{ role_path }}/files/grafana-primary-dashboard.json \
      --from-file=mobile-services-dashboard.json={{ role_path }}/files/mobile-services-dashboard.json \
      --from-file=mobile-app-metrics-dashboard.json={{ role_path }}/files/mobile-app-metrics-dashboard.json \
      --from-file=mobile-app-security-dashboard.json={{ role_path }}/files/mobile-app-security-dashboard.json \
      -n '{{ namespace }}'

- name: 'Grafana ServiceAccount'
  k8s:
    api_version: v1
    kind: ServiceAccount
    definition:
      metadata:
        annotations:
          serviceaccounts.openshift.io/oauth-redirectreference.grafana: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"grafana"}}'
        name: grafana
        namespace: "{{ namespace }}"

- name: 'Grafana Role'
  k8s:
    api_version: rbac.authorization.k8s.io/v1
    kind: Role
    definition:
      metadata:
        name: grafana
        namespace: "{{ namespace }}"
      rules:
      - apiGroups:
        - authentication.k8s.io
        resources:
        - tokenreviews
        verbs:
        - create
      - apiGroups:
        - authorization.k8s.io
        resources:
        - subjectaccessreviews
        verbs:
        - create

- name: 'Grafana RoleBinding'
  k8s:
    api_version: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    definition:
      metadata:
        name: grafana
        namespace: "{{ namespace }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: grafana
      subjects:
      - kind: ServiceAccount
        name: grafana
        namespace: "{{namespace}}"

- name: 'Grafana PVC'
  k8s:
    api_version: v1
    name: '{{ grafana_claim_name }}'
    kind: PersistentVolumeClaim
    namespace: "{{ namespace }}"
    definition:
      metadata:
        labels:
          app: fuse
          service: prometheus
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: "{{ GRAFANA_STORAGE_SIZE }}Gi"

- name: 'Create grafana deployment config'
  k8s:
    api_version: v1
    name: grafana
    kind: Deployment
    namespace: '{{ namespace }}'
    definition:
      metadata:
        labels:
          app: grafana
        name: grafana
        namespace: "{{ namespace }}"
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: grafana
        template:
          metadata:
            labels:
              app: grafana
          spec:
            containers:
            - args:
              - -config=/etc/grafana/grafana.ini
              image: grafana/grafana:5.2.4
              name: grafana
              ports:
              - containerPort: 3000
                name: http
              resources:
                limits:
                  cpu: 200m
                  memory: 200Mi
                requests:
                  cpu: 100m
                  memory: 100Mi
              volumeMounts:
              - mountPath: /var/lib/grafana
                name: grafana-storage
                readOnly: false
              - mountPath: /etc/grafana/provisioning/datasources
                name: grafana-datasources
                readOnly: false
              - mountPath: /etc/grafana/provisioning/dashboards
                name: grafana-dashboards
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/etcd
                name: grafana-dashboard-etcd
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/k8s-cluster-rsrc-use
                name: grafana-dashboard-k8s-cluster-rsrc-use
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/k8s-node-rsrc-use
                name: grafana-dashboard-k8s-node-rsrc-use
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/k8s-resources-cluster
                name: grafana-dashboard-k8s-resources-cluster
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/k8s-resources-namespace
                name: grafana-dashboard-k8s-resources-namespace
                readOnly: false
              - mountPath: /grafana-dashboard-definitions/0/k8s-resources-pod
                name: grafana-dashboard-k8s-resources-pod
                readOnly: false
              - mountPath: /etc/grafana
                name: grafana-config
                readOnly: false
            - args:
              - -provider=openshift
              - -https-address=:{{ grafana_port}}
              - -http-address=
              - -email-domain=*
              - -upstream=http://localhost:{{ grafana_port }}
              - '-openshift-sar={"resource": "namespaces", "verb": "get"}'
              - '-openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get"}}'
              - -tls-cert=/etc/tls/private/tls.crt
              - -tls-key=/etc/tls/private/tls.key
              - -client-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
              - -cookie-secret-file=/etc/proxy/secrets/session_secret
              - -openshift-service-account=grafana
              - -openshift-ca=/etc/pki/tls/cert.pem
              - -openshift-ca=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              - -skip-auth-regex=^/metrics
              image: openshift/oauth-proxy:v1.1.0
              name: grafana-proxy
              ports:
              - containerPort: 3000
                name: https
              volumeMounts:
              - mountPath: /etc/tls/private
                name: secret-grafana-tls
                readOnly: false
              - mountPath: /etc/proxy/secrets
                name: secret-grafana-proxy
                readOnly: false
            priorityClassName: system-cluster-critical
            securityContext: {}
            serviceAccountName: grafana
            volumes:
            - emptyDir: {}
              name: grafana-storage
            - name: grafana-datasources
              secret:
                secretName: grafana-datasources
            - configMap:
                name: grafana-dashboards
              name: grafana-dashboards
            - configMap:
                name: grafana-dashboard-etcd
              name: grafana-dashboard-etcd
            - configMap:
                name: grafana-dashboard-k8s-cluster-rsrc-use
              name: grafana-dashboard-k8s-cluster-rsrc-use
            - configMap:
                name: grafana-dashboard-k8s-node-rsrc-use
              name: grafana-dashboard-k8s-node-rsrc-use
            - configMap:
                name: grafana-dashboard-k8s-resources-cluster
              name: grafana-dashboard-k8s-resources-cluster
            - configMap:
                name: grafana-dashboard-k8s-resources-namespace
              name: grafana-dashboard-k8s-resources-namespace
            - configMap:
                name: grafana-dashboard-k8s-resources-pod
              name: grafana-dashboard-k8s-resources-pod
            - name: grafana-config
              secret:
                secretName: grafana-config
            - name: secret-grafana-tls
              secret:
                secretName: grafana-tls
            - name: secret-grafana-proxy
              secret:
                secretName: grafana-proxy

- name: "Grafana Secret"
  k8s:
    api_version: v1
    kind: Secret
    definition:
      data: {}
      metadata:
        labels:
          k8s-app: grafana
        name: grafana-proxy
        namespace: "{{ namespace }}"
      type: Opaque

- name: 'Grafana Route'
  k8s:
    api_version: v1
    kind: Route
    definition:
      metadata:
        name: grafana
        namespace: "{{ namespace }}"
      spec:
        port:
          targetPort: https
        tls:
          termination: Reencrypt
        to:
          kind: Service
          name: grafana